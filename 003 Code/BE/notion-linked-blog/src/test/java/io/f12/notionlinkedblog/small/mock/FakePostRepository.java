package io.f12.notionlinkedblog.small.mock;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

import io.f12.notionlinkedblog.post.infrastructure.PostEntity;
import io.f12.notionlinkedblog.post.service.port.PostRepository;

public class FakePostRepository implements PostRepository {
	private final AtomicLong autogeneratedId = new AtomicLong(0);
	private final List<PostEntity> data = Collections.synchronizedList(new ArrayList<>());

	@Override
	public Optional<PostEntity> findById(Long id) {
		return data.stream().filter(post -> post.getId().equals(id)).findAny();
	}

	@Override
	public List<PostEntity> findByPostIdForTrend() {
		return null;
	}

	@Override
	public String findThumbnailPathWithName(String name) {
		return null;
	}

	@Override
	public PostEntity save(PostEntity post) {
		if (post.getId() == null || post.getId() == 0) {
			post.setId(autogeneratedId.incrementAndGet());
			data.add(post);
		} else {
			data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
			data.add(post);
		}
		return post;
	}

	@Override
	public void deleteById(Long id) {
		data.removeIf(item -> Objects.equals(item.getId(), id));
	}

	@Override
	public void deleteAll() {
		data.clear();
	}
}
